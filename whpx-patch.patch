diff -Nru ../orig/qemu-9.2.2/target/i386/whpx/whpx-all.c ./target/i386/whpx/whpx-all.c
--- ../orig/qemu-9.2.2/target/i386/whpx/whpx-all.c
+++ ./target/i386/whpx/whpx-all.c
@@ -10,6 +10,7 @@
 
 #include "qemu/osdep.h"
 #include "cpu.h"
+#include "exec/ram_addr.h"
 #include "exec/address-spaces.h"
 #include "exec/ioport.h"
 #include "gdbstub/helpers.h"
@@ -2339,11 +2340,18 @@
     MemoryRegion *mr = section->mr;
     hwaddr start_pa = section->offset_within_address_space;
     ram_addr_t size = int128_get64(section->size);
+    bool is_romd = false;
     unsigned int delta;
     uint64_t host_va;
 
     if (!memory_region_is_ram(mr)) {
-        return;
+        if (memory_region_is_romd(mr)) {            
+            is_romd = true;
+            warn_report("WHPX: ROMD region 0x%016" PRIx64 "->0x%016" PRIx64,
+                        start_pa, start_pa + size);
+        } else {
+            return;
+        }
     }
 
     delta = qemu_real_host_page_size() - (start_pa & ~qemu_real_host_page_mask());
@@ -2362,7 +2370,40 @@
             + section->offset_within_region + delta;
 
     whpx_update_mapping(start_pa, size, (void *)(uintptr_t)host_va, add,
-                        memory_region_is_rom(mr), mr->name);
+                        memory_region_is_rom(mr) || is_romd, mr->name);
+}
+
+void whpx_update_guest_pa_range(uint64_t start_pa, uint64_t size, void *host_va, int readonly, int add)
+{
+    MemoryRegion mr;
+    MemoryRegionSection section;
+    RAMBlock ram_block;
+
+    memset(&ram_block, 0, sizeof(RAMBlock));
+    ram_block.mr = &mr;
+    ram_block.used_length = REAL_HOST_PAGE_ALIGN(size);
+    ram_block.max_length = REAL_HOST_PAGE_ALIGN(size);
+    ram_block.fd = -1;
+    ram_block.guest_memfd = -1;
+    ram_block.page_size = getpagesize();
+    ram_block.host = host_va;
+    ram_block.flags |= RAM_PREALLOC;
+
+    memory_region_init(&mr, NULL, NULL, REAL_HOST_PAGE_ALIGN(size));
+    mr.ram = true;
+    mr.ram_block = &ram_block;
+    mr.readonly = readonly;
+    mr.nonvolatile = false;
+
+    section.mr = &mr;
+    section.fv = 0;
+    section.offset_within_region = 0;
+    section.size = mr.size;
+    section.offset_within_address_space = start_pa;
+    section.readonly = mr.readonly;
+    section.nonvolatile = mr.nonvolatile;
+
+    whpx_process_section(&section, add);
+    object_unref(OBJECT(&mr));
 }
 
 static void whpx_region_add(MemoryListener *listener,
diff -Nru ../orig/qemu-9.2.2/ui/cocoa.m ./ui/cocoa.m
--- ../orig/qemu-9.2.2/ui/cocoa.m
+++ ./ui/cocoa.m
@@ -22,6 +22,8 @@
  * THE SOFTWARE.
  */
 
+#define GL_SILENCE_DEPRECATION
+
 #include "qemu/osdep.h"
 
 #import <Cocoa/Cocoa.h>
@@ -51,6 +53,10 @@
 #include <Carbon/Carbon.h>
 #include "hw/core/cpu.h"
 
+#ifdef CONFIG_EGL
+#include "ui/egl-context.h"
+#endif
+
 #ifndef MAC_OS_VERSION_14_0
 #define MAC_OS_VERSION_14_0 140000
 #endif
@@ -73,33 +79,14 @@
     int height;
 } QEMUScreen;
 
-static void cocoa_update(DisplayChangeListener *dcl,
-                         int x, int y, int w, int h);
-
-static void cocoa_switch(DisplayChangeListener *dcl,
-                         DisplaySurface *surface);
-
-static void cocoa_refresh(DisplayChangeListener *dcl);
-static void cocoa_mouse_set(DisplayChangeListener *dcl, int x, int y, bool on);
-static void cocoa_cursor_define(DisplayChangeListener *dcl, QEMUCursor *cursor);
-
-static const DisplayChangeListenerOps dcl_ops = {
-    .dpy_name          = "cocoa",
-    .dpy_gfx_update = cocoa_update,
-    .dpy_gfx_switch = cocoa_switch,
-    .dpy_refresh = cocoa_refresh,
-    .dpy_mouse_set = cocoa_mouse_set,
-    .dpy_cursor_define = cocoa_cursor_define,
-};
-static DisplayChangeListener dcl = {
-    .ops = &dcl_ops,
-};
+static DisplayChangeListener dcl;
+static DisplaySurface *surface;
 static QKbdState *kbd;
 static int cursor_hide = 1;
 static int left_command_key_enabled = 1;
 static bool swap_opt_cmd;
 
-static CGInterpolationQuality zoom_interpolation = kCGInterpolationNone;
+static bool zoom_interpolation;
 static NSTextField *pauseLabel;
 
 static bool allow_events;
@@ -108,6 +95,97 @@
 static QemuClipboardInfo *cbinfo;
 static QemuEvent cbevent;
 
+#ifdef CONFIG_OPENGL
+
+@interface QemuCGLLayer : CAOpenGLLayer
+@end
+
+static bool gl_dirty;
+static uint32_t gl_scanout_id;
+static DisplayGLTextureBorrower gl_scanout_borrow;
+static QEMUGLContext gl_view_ctx;
+
+#ifdef CONFIG_EGL
+static EGLSurface egl_surface;
+#endif
+
+static void cocoa_gl_switch(DisplayChangeListener *dcl,
