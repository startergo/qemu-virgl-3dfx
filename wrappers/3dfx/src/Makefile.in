QEMU_SRC_DIR=../../../qemu-0
FXLIB=../../fxlib
GIT=$(shell git rev-parse HEAD | sed "s/\(.......\).*/\1\-/")
CROSS=
CC=$(CROSS)gcc
RC=windres
DLLTOOL=dlltool
STRIP=strip
CFLAGS=-march=x86-64-v2 -mtune=generic -O3
CFLAGS+=-pipe -I$(QEMU_SRC_DIR)/hw/3dfx -I$(FXLIB) -D__REV__=\"$(GIT)\" -Wall -Werror -flto=auto -fomit-frame-pointer
LDFLAGS=-static-libgcc
LDFLAGS+=-Wl,--disable-auto-image-base,--no-seh,--dynamicbase,--nxcompat
SRCDIR=../src
TARGET1=glide.dll
TARGET2=glide2x.dll
TARGET3=glide3x.dll
GENDEF=gendef
OUTDIR=$(shell basename `pwd`)

PCINOOP=\
    Close@0 \
    DeviceExists@4 \
    FindCard@12 \
    FindCardMulti@16 \
    FindFreeMTRR@4 \
    FindMTRRMatch@16 \
    GetConfigData@20 \
    MapCard@20 \
    MapCardMulti@24 \
    MapPhysicalToLinear@12 \
    Open@0 \
    SetConfigData@20 \
    SetMTRR@16 \
    UnmapPhysical@8 \

C_OBJS:=\
    fxhook.o \
    fxhpat.o \
    fxlib9x.o \
    fxlibnt.o \
    fxtime.o \
    md5.o \


all: fxlib $(TARGET1) $(TARGET2) $(TARGET3) exports-check fxdrv

fxdrv:
	@make -C ../dxe OUTDIR=$(OUTDIR)
	@make -C ../ovl OUTDIR=$(OUTDIR)
	@make -C ../drv OUTDIR=$(OUTDIR) CROSS=$(CROSS)

exports-check: $(TARGET1) $(TARGET2) $(TARGET3)
	@if [ $$(objdump -x $(TARGET2) | grep "\[[\ 0-9]*\]" | grep -v "^\[" | \
		grep -v -e reloc -e Export\ RVA | wc -l) -ne 144 ] || \
	    [ $$(objdump -x $(TARGET1) | grep "\[[\ 0-9]*\]" | grep -v "^\[" | \
		grep -v -e reloc -e Export\ RVA | wc -l) -ne 131 ] || \
	    [ $$(objdump -x $(TARGET3) | grep "\[[\ 0-9]*\]" | grep -v "^\[" | \
		grep -v -e reloc -e Export\ RVA | wc -l) -ne 94 ]; \
		then exit 1; fi

$(TARGET2): $(C_OBJS) pciNoop.o glidedll.o
	@echo "  CFLAGS  $(CFLAGS)"
	@echo "  LDFLAGS $(LDFLAGS)"
	@echo "  RC  $(@:.dll=_res.o)"
	@$(RC) -Jrc -Ocoff -DGLIDE2 -o $(@:.dll=_res.o) ../src/version.rc
	@$(CC) -shared $(CFLAGS) -o $@ $+ $(LDFLAGS)
	@$(GENDEF) - $@ | sed "s/\(@[0-9]*\)@.*/\1/;s/\(^.*@[0-9]*\)/_\1\ =\ \1/" | \
		sed "s/\ ;\ Check!!!.*//" | \
		grep -e ^LIB -e ^EXP -e " = " > $(@:.dll=.def)
	@echo "  LD  $@"
	@$(CC) -shared $(CFLAGS) -o $@ $(@:dll=def) $(@:.dll=_res.o) $+ $(LDFLAGS)
	@$(GENDEF) - $@ | sed "s/\(@[0-9]*\)@.*/\1/;s/^_//" > lib$(@:dll=def)
	@$(DLLTOOL) -U -d lib$(@:dll=def) -l lib$@.a

$(TARGET1): $(C_OBJS) gl211dll.o
	@echo "  CFLAGS  $(CFLAGS)"
	@echo "  LDFLAGS $(LDFLAGS)"
	@echo "  RC  $(@:.dll=_res.o)"
	@$(RC) -Jrc -Ocoff -DGLIDE1 -o $(@:.dll=_res.o) ../src/version.rc
	@$(CC) -shared $(CFLAGS) -o $@ $+ $(LDFLAGS)
	@$(GENDEF) - $@ | sed "s/\(@[0-9]*\)@.*/\1/;s/\(^.*@[0-9]*\)/_\1\ =\ \1/" | \
		sed "s/\ ;\ Check!!!.*//" | \
		grep -e ^LIB -e ^EXP -e " = " > $(@:.dll=.def)
	@echo "  LD  $@"
	@$(CC) -shared $(CFLAGS) -o $@ $(@:dll=def) $(@:.dll=_res.o) $+ $(LDFLAGS)

$(TARGET3): $(C_OBJS) gl301dll.o
	@echo "  CFLAGS  $(CFLAGS)"
	@echo "  LDFLAGS $(LDFLAGS)"
	@echo "  RC  $(@:.dll=_res.o)"
	@$(RC) -Jrc -Ocoff -DGLIDE3 -o $(@:.dll=_res.o) ../src/version.rc
	@$(CC) -shared $(CFLAGS) -o $@ $+ $(LDFLAGS)
	@$(GENDEF) - $@ | sed "s/\(@[0-9]*\)@.*/\1/;s/\(^.*@[0-9]*\)/_\1\ =\ \1/" | \
		sed "s/\ ;\ Check!!!.*//" | \
		grep -e ^LIB -e ^EXP -e " = " > $(@:.dll=.def)
	@echo "  LD  $@"
	@$(CC) -shared $(CFLAGS) -o $@ $(@:dll=def) $(@:.dll=_res.o) $+ $(LDFLAGS)
	@$(GENDEF) - $@ | sed "s/\(@[0-9]*\)@.*/\1/;s/^_//" > lib$(@:dll=def)
	@$(DLLTOOL) -U -d lib$(@:dll=def) -l lib$@.a

fxlib:
	@if [ "$$MSYSTEM" != "MINGW32" ]; then echo "Error: MSYSTEM == $$MSYSTEM"; exit 1; fi
	@echo "  CC  $(C_OBJS)"
	@for i in $(C_OBJS); do \
		$(CC) $(CFLAGS) -c -o $$i $(FXLIB)/`echo $$i | sed "s/\.o/\.c/"`; \
	done

pciNoop.o:
	@echo "#include <stdint.h>" > $(@:.o=.c)
	@echo "#define PT_CALL __stdcall" >> $(@:.o=.c)
	@for i in $(PCINOOP); do \
		ARGS=`echo $$i | sed "s/.*@//"`; \
		FUNC=`echo $$i | sed "s/@[0-9]*//"`; \
		printf "%s" "void PT_CALL pci$$FUNC(" >>$(@:.o=.c); \
		if [ $$ARGS -eq 0 ]; then printf "%s" "void" >>$(@:.o=.c); \
		else printf "%s" "uint32_t arg0" >>$(@:.o=.c); \
		    if [ $$(((ARGS>>2)-1)) -ne 0 ]; then \
		        for j in $$(seq 1 $$(((ARGS>>2)-1))); do \
			    printf "%s" ", uint32_t arg$$j" >>$(@:.o=.c); \
		        done; fi; \
		fi; printf "%s\n" ") { }" >>$(@:.o=.c); \
	done
	@echo "  CC  $@"
	@$(CC) -c -o $@ $(@:.o=.c)

%.o: $(SRCDIR)/%.c
	@echo "  CC  $@"
	@$(CC) $(CFLAGS) -c -o $@ $<

clean:
	@make -C ../dxe $@
	@make -C ../ovl $@
	@rm -f *.[co] *.def
	@if [ ! -z "$$(find . | grep "\.dll\.a$$")" ]; then \
		$(STRIP) --strip-unneeded *.dll *.a; \
		sh -c 'ls -l glide*'; fi

distclean: clean
	@make -C ../dxe $@ OUTDIR=$(OUTDIR)
	@make -C ../ovl $@ OUTDIR=$(OUTDIR)
	@rm -f $(TARGET1) $(TARGET2) $(TARGET3) *.a *.vxd *.sys *.exe *.zip

