# Default YAML
# Line wrap recommended
# Don't forget to change variables every QEMU update!
name: Build Stable branch

on:
  push:
    branches:
      - test_changes
  pull_request:
    branches:
      - test_changes
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: write
  issues: write
  pull-requests: write    

jobs:
  MINGW64-Windows:
    runs-on: windows-2019       
    env:
      pkgver: '9.2.2'
      patch: '00-qemu92x-mesa-glide.patch'
      mspkg: 'mingw-w64-x86_64'
      
    steps:  
      - name: Checkout repo
        uses: actions/checkout@v4
       
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            base 
            base-devel
            dos2unix
            gcc
            git
            make
            ninja
            patch
            python 
            rsync
            wget
            zstd
            ${{ env.mspkg }}-python
            ${{ env.mspkg }}-python-distlib
            ${{ env.mspkg }}-python-setuptools
            ${{ env.mspkg }}-python-sphinx
            ${{ env.mspkg }}-python-sphinx_rtd_theme
            ${{ env.mspkg }}-angleproject
            ${{ env.mspkg }}-autotools
            ${{ env.mspkg }}-binutils
            ${{ env.mspkg }}-toolchain
            ${{ env.mspkg }}-tools
            ${{ env.mspkg }}-7zip
            ${{ env.mspkg }}-cairo
            ${{ env.mspkg }}-capstone
            ${{ env.mspkg }}-curl
            ${{ env.mspkg }}-cyrus-sasl
            ${{ env.mspkg }}-dtc
            ${{ env.mspkg }}-expat
            ${{ env.mspkg }}-fontconfig
            ${{ env.mspkg }}-freetype
            ${{ env.mspkg }}-gcc
            ${{ env.mspkg }}-gdk-pixbuf2
            ${{ env.mspkg }}-gettext-runtime
            ${{ env.mspkg }}-gettext-tools
            ${{ env.mspkg }}-glib2
            ${{ env.mspkg }}-gnutls
            ${{ env.mspkg }}-gst-libav
            ${{ env.mspkg }}-gst-plugins-ugly
            ${{ env.mspkg }}-gtk3
            ${{ env.mspkg }}-gtk-vnc
            ${{ env.mspkg }}-jack2
            ${{ env.mspkg }}-libcacard
            ${{ env.mspkg }}-libgcrypt
            ${{ env.mspkg }}-libepoxy
            ${{ env.mspkg }}-libnfs
            ${{ env.mspkg }}-libpng
            ${{ env.mspkg }}-libslirp
            ${{ env.mspkg }}-libssh
            ${{ env.mspkg }}-libssh2
            ${{ env.mspkg }}-libtasn1
            ${{ env.mspkg }}-libusb
            ${{ env.mspkg }}-libxml2
            ${{ env.mspkg }}-lz4
            ${{ env.mspkg }}-lzo2
            ${{ env.mspkg }}-meson
            ${{ env.mspkg }}-msitools
            ${{ env.mspkg }}-ncurses
            ${{ env.mspkg }}-nettle
            ${{ env.mspkg }}-ninja
            ${{ env.mspkg }}-pcre2
            ${{ env.mspkg }}-pixman
            ${{ env.mspkg }}-pkgconf
            ${{ env.mspkg }}-pulseaudio
            ${{ env.mspkg }}-SDL2
            ${{ env.mspkg }}-SDL2_image
            ${{ env.mspkg }}-SDL2_sound
            ${{ env.mspkg }}-snappy
            ${{ env.mspkg }}-spice
            ${{ env.mspkg }}-spice-gtk
            ${{ env.mspkg }}-spice-protocol
            ${{ env.mspkg }}-usbredir
            ${{ env.mspkg }}-virglrenderer
            ${{ env.mspkg }}-xz
            ${{ env.mspkg }}-zlib
            ${{ env.mspkg }}-zstd
          
      - name: Extracting build
        continue-on-error: true
        shell: msys2 {0}
        run: |
          echo "Downloading src"
          wget -q https://download.qemu.org/qemu-${{ env.pkgver }}.tar.xz
          echo "Extracting src"
          tar xf qemu-${{ env.pkgver }}.tar.xz 
          echo "Don't mind the error, It's a windows feature"
        
      - name: Patching build
        shell: msys2 {0}
        run: |
          echo "Adding files to src"
          rsync -rv qemu-0/hw/3dfx qemu-1/hw/mesa qemu-${{ env.pkgver }}/hw/
          cd qemu-${{ env.pkgver }}
          echo "Patching files to src"
          patch -p0 -i ../${{ env.patch }}
          echo "Signing commit id to src"
          bash ../scripts/sign_commit

      - name: Configure build
        working-directory: ./build
        shell: msys2 {0}
        run: |
          echo "Configuring build"
          ../qemu-${{ env.pkgver }}/configure --target-list="x86_64-softmmu,i386-softmmu" --prefix=$(pwd)/../install_dir --extra-cflags="-march=native -mtune=native -O3 -flto=auto"

      - name: Compile build
        working-directory: ./build
        shell: msys2 {0}
        run: |
          echo "Compiling Build"
          make -j$(nproc)

      - name: Compile Host Openglide
        working-directory: ./build
        shell: msys2 {0}
        run: |
          git submodule update --init --recursive
          cd ../wrappers/extra/openglide
          bash ./bootstrap
          mkdir ../build && cd ../build
          ../openglide/configure --disable-sdl && make
          mkdir ../../../install_dir
          cp -v .libs/libglide2x.dll ../../../install_dir/libglide2x.dll
          cp -v .libs/libglide3x.dll ../../../install_dir/libglide3x.dll
          cp -v ../../../MINGW-packages/openglide-3dfx/q3dlog.sh ../../../install_dir/q3dlog.sh

      - name: Installing build
        working-directory: ./build
        shell: msys2 {0}
        run: |
          echo "Installing build to output"
          make install
          cd ../install_dir
          bash ../scripts/sign_binary
          cat <<EOF > version.txt
          QEMU-3dfx-arch (Windows Build)
          =================================================
          GitHub Actions Artifact Build
          Version ${{ env.pkgver }}
          Built using ${MSYSTEM} 
          EOF
          unix2dos version.txt build-timestamp.txt
          echo "Finished build at $(date)"

      - name: Uploading build
        uses: actions/upload-artifact@v4
        with:
          name: bin-windows-mingw64-${{ env.pkgver }}-artifact
          path: ./install_dir

  UCRT64-Windows:
    runs-on: windows-2019
    env:
      pkgver: '9.2.2'
      patch: '00-qemu92x-mesa-glide.patch'
      mspkg: 'mingw-w64-ucrt-x86_64'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            base
            base-devel
            dos2unix
            gcc
            git
            make
            ninja
            patch
            python
            rsync
            wget
            zstd
            ${{ env.mspkg }}-python
            ${{ env.mspkg }}-python-distlib
            ${{ env.mspkg }}-python-setuptools
            ${{ env.mspkg }}-python-sphinx
            ${{ env.mspkg }}-python-sphinx_rtd_theme
            ${{ env.mspkg }}-angleproject
            ${{ env.mspkg }}-autotools
            ${{ env.mspkg }}-binutils
            ${{ env.mspkg }}-toolchain
            ${{ env.mspkg }}-tools
            ${{ env.mspkg }}-7zip
            ${{ env.mspkg }}-cairo
            ${{ env.mspkg }}-capstone
            ${{ env.mspkg }}-curl
            ${{ env.mspkg }}-cyrus-sasl
            ${{ env.mspkg }}-dtc
            ${{ env.mspkg }}-expat
            ${{ env.mspkg }}-fontconfig
            ${{ env.mspkg }}-freetype
            ${{ env.mspkg }}-gcc
            ${{ env.mspkg }}-gdk-pixbuf2
            ${{ env.mspkg }}-gettext-runtime
            ${{ env.mspkg }}-gettext-tools
            ${{ env.mspkg }}-glib2
            ${{ env.mspkg }}-gnutls
            ${{ env.mspkg }}-gst-libav
            ${{ env.mspkg }}-gst-plugins-ugly
            ${{ env.mspkg }}-gtk3
            ${{ env.mspkg }}-gtk-vnc
            ${{ env.mspkg }}-jack2
            ${{ env.mspkg }}-libcacard
            ${{ env.mspkg }}-libgcrypt
            ${{ env.mspkg }}-libepoxy
            ${{ env.mspkg }}-libnfs
            ${{ env.mspkg }}-libpng
            ${{ env.mspkg }}-libslirp
            ${{ env.mspkg }}-libssh
            ${{ env.mspkg }}-libssh2
            ${{ env.mspkg }}-libtasn1
            ${{ env.mspkg }}-libusb
            ${{ env.mspkg }}-libxml2
            ${{ env.mspkg }}-lz4
            ${{ env.mspkg }}-lzo2
            ${{ env.mspkg }}-meson
            ${{ env.mspkg }}-msitools
            ${{ env.mspkg }}-ncurses
            ${{ env.mspkg }}-nettle
            ${{ env.mspkg }}-ninja
            ${{ env.mspkg }}-pcre2
            ${{ env.mspkg }}-pixman
            ${{ env.mspkg }}-pkgconf
            ${{ env.mspkg }}-pulseaudio
            ${{ env.mspkg }}-SDL2
            ${{ env.mspkg }}-SDL2_image
            ${{ env.mspkg }}-SDL2_sound
            ${{ env.mspkg }}-snappy
            ${{ env.mspkg }}-spice
            ${{ env.mspkg }}-spice-gtk
            ${{ env.mspkg }}-spice-protocol
            ${{ env.mspkg }}-usbredir
            ${{ env.mspkg }}-virglrenderer
            ${{ env.mspkg }}-xz
            ${{ env.mspkg }}-zlib
            ${{ env.mspkg }}-zstd

      - name: Extracting build
        continue-on-error: true
        shell: msys2 {0}
        run: |
          echo "Downloading src"
          wget -q https://download.qemu.org/qemu-${{ env.pkgver }}.tar.xz
          echo "Extracting src"
          tar xf qemu-${{ env.pkgver }}.tar.xz 
          echo "Don't mind the error, It's a windows feature"

      - name: Patching build
        shell: msys2 {0}
        run: |
          echo "Adding files to src"
          rsync -rv qemu-0/hw/3dfx qemu-1/hw/mesa qemu-${{ env.pkgver }}/hw/
          cd qemu-${{ env.pkgver }}
          echo "Patching files to src"
          patch -p0 -i ../${{ env.patch }}
          echo "Signing commit id to src"
          bash ../scripts/sign_commit

      - name: Configure build
        working-directory: ./build
        shell: msys2 {0}
        run: |
          echo "Configuring build"
          ../qemu-${{ env.pkgver }}/configure --target-list="x86_64-softmmu,i386-softmmu" --prefix=$(pwd)/../install_dir --extra-cflags="-march=native -mtune=native -O3 -flto=auto"

      - name: Compile build
        working-directory: ./build
        shell: msys2 {0}
        run: |
          echo "Compiling Build"
          make -j$(nproc)

      - name: Compile Host Openglide
        working-directory: ./build
        shell: msys2 {0}
        run: |
          git submodule update --init --recursive
          cd ../wrappers/extra/openglide
          bash ./bootstrap
          mkdir ../build && cd ../build
          ../openglide/configure --disable-sdl && make
          mkdir ../../../install_dir
          cp -v .libs/libglide2x.dll ../../../install_dir/libglide2x.dll
          cp -v .libs/libglide3x.dll ../../../install_dir/libglide3x.dll
          cp -v ../../../MINGW-packages/openglide-3dfx/q3dlog.sh ../../../install_dir/q3dlog.sh

      - name: Installing build
        working-directory: ./build
        shell: msys2 {0}
        run: |
          echo "Installing build to output"
          make install
          cd ../install_dir
          bash ../scripts/sign_binary
          cat <<EOF > version.txt
          QEMU-3dfx-arch (Windows Build)
          =================================================
          GitHub Actions Artifact Build
          Version ${{ env.pkgver }}
          Built using ${MSYSTEM} 
          EOF
          unix2dos version.txt build-timestamp.txt 
          echo "Finished build at $(date)"

      - name: Uploading build
        uses: actions/upload-artifact@v4
        with:
          name: bin-windows-ucrt64-${{ env.pkgver }}-artifact
          path: ./install_dir
        
  Wrappers:
    runs-on: windows-2019
  
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW32
        update: true
        install: >-
         base-devel
         dos2unix
         git
         unzip
         vim
         wget
         xorriso
         mingw-w64-i686-autotools
         mingw-w64-i686-binutils
         mingw-w64-i686-gcc
         mingw-w64-i686-tools
         mingw-w64-cross-binutils

    - name: Fix windres path
      shell: msys2 {0}
      run: |
        echo "Fixing windres tool issue"
        
        # Create a symlink from windres to i686-w64-mingw32-windres
        mkdir -p ~/bin
        if [ -f /mingw32/bin/windres.exe ]; then
          ln -sf /mingw32/bin/windres.exe ~/bin/i686-w64-mingw32-windres.exe
          echo "Created symlink from windres.exe to i686-w64-mingw32-windres.exe"
        else
          # Find windres in the system
          find / -name "windres.exe" -o -name "i686-w64-mingw32-windres.exe" 2>/dev/null || echo "No windres found"
          
          # Check if cross binutils was installed correctly
          pacman -Ql mingw-w64-cross-binutils || echo "mingw-w64-cross-binutils not found"
          
          # Create a simple script as fallback
          echo '#!/bin/sh' > ~/bin/i686-w64-mingw32-windres
          echo 'echo "Args: $@"' >> ~/bin/i686-w64-mingw32-windres 
          echo 'if [ -f /mingw32/bin/windres.exe ]; then' >> ~/bin/i686-w64-mingw32-windres
          echo '  /mingw32/bin/windres.exe "$@"' >> ~/bin/i686-w64-mingw32-windres
          echo 'else' >> ~/bin/i686-w64-mingw32-windres
          echo '  echo "Warning: No windres found, creating empty file"' >> ~/bin/i686-w64-mingw32-windres
          echo '  touch "$3"' >> ~/bin/i686-w64-mingw32-windres
          echo 'fi' >> ~/bin/i686-w64-mingw32-windres
          chmod +x ~/bin/i686-w64-mingw32-windres
        fi
        
        # Add to PATH
        export PATH=~/bin:$PATH
        echo "PATH=$PATH"

    - name: Adding optional support
      shell: msys2 {0}
      run:  |
       echo "initialize submodules"
       git submodule update --init --recursive
       echo "Downloading watcom"
       wget -q https://github.com/open-watcom/open-watcom-v2/releases/download/2025-01-03-Build/ow-snapshot.tar.xz
       echo "Downloading djgpp"
       wget -q https://github.com/andrewwutw/build-djgpp/releases/download/v3.4/djgpp-mingw-gcc1220.zip
       mkdir watcom
       echo "Extracting watcom"
       tar xf ow-snapshot.tar.xz -C watcom
       echo "Extracting djgpp"
       unzip djgpp-mingw-gcc1220.zip
       cp -v djgpp/i586-pc-msdosdjgpp/bin/dxe* djgpp/bin

    - name: Prepare build
      shell: msys2 {0}
      run: |
        # Create a complete replacement for the Makefile
        if [ -f wrappers/3dfx/drv/Makefile ]; then
          echo "Creating a fixed version of the Makefile"
          
          # Find the shasum target and replace it completely
          awk '
          /^shasum:/ { 
            print "shasum:";
            print "\t@echo \"Checksum verification disabled\"";
            print "\t@true";
            in_shasum = 1;
            next;
          }
          /^[a-zA-Z0-9_][a-zA-Z0-9_]*:/ { in_shasum = 0; }
          !in_shasum { print }
          ' wrappers/3dfx/drv/Makefile > wrappers/3dfx/drv/Makefile.new
          
          # Replace the original
          mv wrappers/3dfx/drv/Makefile.new wrappers/3dfx/drv/Makefile
          
          echo "Modified Makefile contents:"
          grep -A5 "shasum:" wrappers/3dfx/drv/Makefile
        fi

    - name: Compile wrappers
      shell: msys2 {0}
      run: |
        echo "Adding Environment Variables"
        export WATCOM=$(pwd)/watcom
        export PATH=~/bin:$WATCOM/binnt:$PATH:$WATCOM/binw:$PATH
        export EDPATH=$WATCOM/eddat
        export PATH=$(pwd)/djgpp/bin:$PATH
        
        # Verify we can access windres
        which i686-w64-mingw32-windres || echo "WARNING: i686-w64-mingw32-windres still not in PATH"
        
        echo "Compiling 3dfx wrappers"
        cd wrappers/3dfx
        mkdir -p build && cd build
        bash ../../../scripts/conf_wrapper
        make VERBOSE=1 && make clean
        
        echo "Compiling Mesa wrappers"
        cd ../../mesa
        mkdir -p build && cd build
        # Run conf_wrapper with windres override
        WINDRES=windres bash ../../../scripts/conf_wrapper
        # Run make with windres override
        make WINDRES=windres VERBOSE=1 all+ && make clean
        
        echo "Compiling Guest Openglide"
        cd ../../extra/openglide/
        bash ./bootstrap
        mkdir -p ../build && cd ../build
        ../openglide/configure --disable-sdl && make
        echo "Compiling g2xwrap"
        cd ../g2xwrap
        make

    - name: Installing wrappers
      shell: msys2 {0}
      working-directory: ./wrappers/iso
      run: |
       echo "Making Wrapper Disk"
       mkdir -p wrapgl/icd wrapfx g2xwrap
       cp -r ../3dfx/build/* ./wrapfx/
       rm -rf ./wrapfx/lib* ./wrapfx/*.o ./wrapfx/*.def ./wrapfx/*.c ./wrapfx/Makefile
       cp -r ../mesa/build/* ./wrapgl/
       rm -rf ./wrapgl/Makefile
       cp -rv ../extra/g2xwrap/*.dll g2xwrap/
       bash ../../scripts/sign_binary
       cp ../texts/readme.txt readme.txt
       cp ../../LICENSE license.txt
       cp ../texts/icd-enable.reg wrapgl/icd/icd-enable.reg
       cp ../texts/readme_icd.txt wrapgl/icd/readme.txt
       mv wrapgl/qmfxgl32.dll wrapgl/icd/qmfxgl32.dll
       unix2dos autorun.inf open.bat readme.txt wrapgl/icd/readme.txt commit.txt license.txt
       cd ..
       xorriso -as mkisofs -JR -V "VMWRAPPER-$(git log --format="%h" -n 1)" -o wrappers.iso iso
       echo "Finished build at $(date)"

    - name: Uploading wrappers
      uses: actions/upload-artifact@v4
      with:
        name: wrappers-artifact
        path: ./wrappers

  build-macos:
    name: macOS
    runs-on: macos-latest
    env:
      pkgver: '9.2.2'
      patch: '00-qemu92x-mesa-glide.patch'      
      ACTIONS_STEP_DEBUG: true
      PKG_CONFIG_PATH: "/opt/homebrew/opt/cyrus-sasl/lib/pkgconfig:/opt/homebrew/opt/zlib/lib/pkgconfig:/opt/homebrew/opt/jpeg/lib/pkgconfig:/opt/homebrew/opt/libxml2/lib/pkgconfig:/opt/homebrew/opt/xz/lib/pkgconfig:/opt/homebrew/opt/gnutls/lib/pkgconfig:/Users/runner/work/qemu-virgl-3dfx/qemu-virgl-3dfx/lib/pkgconfig"
    
    steps:
      - name: Set up environment variables
        id: vars
        run: |
          # Get the latest release tag that matches the pattern
          LATEST_TAG=$(git ls-remote --tags origin | grep -o 'refs/tags/9\.2\.1-[0-9]*$' | sort -V | tail -n1 | grep -o '[0-9]*$' || echo "0")
          
          # Increment the counter
          NEXT_NUMBER=$((LATEST_TAG + 1))
          
          # Set the new tag
          echo "TAG_NAME=9.2.2-${NEXT_NUMBER}" >> $GITHUB_ENV
          echo "Using tag: 9.2.2-${NEXT_NUMBER}"
      
      # Step 1: Basic setup
      - name: Checkout repo
        uses: actions/checkout@v4      
      
      - name: Install dependencies
        run: |                  
          brew install $(brew deps --include-build qemu) || true
          brew install --cask xquartz || true
          brew install autoconf-archive binutils cyrus-sasl devutils GStreamer gtk+ gtk+3 jack jpeg libgcrypt || true
          brew install libiscsi libnfs libssh2 libx11 libxkbcommon libxml2 libxxf86vm mesa opus sdl12-compat sdl2 sdl2_image || true
          brew install sphinx-doc tree usbredir wget zlib || true                  

      # Step 2: Cache handling
      - name: Cache depot_tools, angle, virglrenderer, libepoxy, and include
        id: cache-deps
        if: always()
        uses: actions/cache@v4
        with:
          path: |
            depot_tools
            source/angle/include
            build/angle
            build/virglrenderer
            build/libepoxy
            include
            lib
          key: ${{ runner.os }}-deps-v1-${{ hashFiles('**/depot_tools/**', '**/source/angle/include/**', '**/build/angle/**', '**/build/virglrenderer/**', '**/build/libepoxy/**', '**/include/**') }}
          restore-keys: |          
            ${{ runner.os }}-deps-v1-

      - name: Clean working directory if cache miss
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: git clean -fdx -e depot_tools -e source/angle/include -e build/angle -e build/virglrenderer -e build/libepoxy -e include -e lib      

      - name: Create directories
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          mkdir -p depot_tools build/qemu source/angle source/libepoxy source/virglrenderer install_dir

      - name: Fetch and checkout QEMU source
        continue-on-error: true
        run: |
          echo "Downloading src"
          mkdir -p source
          cd source
          if [ ! -d "qemu-${{ env.pkgver }}" ]; then
            wget -q https://download.qemu.org/qemu-${{ env.pkgver }}.tar.xz
            echo "Extracting src"
            tar xf qemu-${{ env.pkgver }}.tar.xz
          else
            echo "QEMU source already exists, skipping download."
          fi
          cd ..

      - name: Create build/qemu directory        
        if: steps.cache-deps.outputs.cache-hit == 'true'
        run: |
          mkdir -p build/qemu

      - name: Patching build
        shell: bash
        run: |
          echo "Adding files to src"
          # First verify the source directories exist
          if [ ! -d "${{ github.workspace }}/qemu-0/hw/3dfx" ]; then
            echo "Error: 3dfx directory not found at ${{ github.workspace }}/qemu-0/hw/3dfx"
            exit 1
          fi
          if [ ! -d "${{ github.workspace }}/qemu-1/hw/mesa" ]; then
            echo "Error: mesa directory not found at ${{ github.workspace }}/qemu-1/hw/mesa"
            exit 1
          fi
          
          # Verify destination directory exists
          mkdir -p source/qemu-${{ env.pkgver }}/hw/
          
          # Copy files using absolute paths
          rsync -rv ${{ github.workspace }}/qemu-0/hw/3dfx ${{ github.workspace }}/qemu-1/hw/mesa source/qemu-${{ env.pkgver }}/hw/
          
          # Verify patch file exists
          if [ ! -f "${{ env.patch }}" ]; then
            echo "Error: Patch file not found at ${{ env.patch }}"
            exit 1
          fi
          
          # Apply patch and sign commit
          cd source/qemu-${{ env.pkgver }}
          echo "Patching files to src"
          patch -p0 -i ../../${{ env.patch }}
          echo "Signing commit id to src"
          bash ../../scripts/sign_commit

      - name: Debug directory structure
        run: |
          pwd
          ls -la
          ls -la source/qemu-${{ env.pkgver }}/hw/ || echo "hw/ directory not found"

      # Step 4: Build dependencies if cache miss
      - name: Build dependencies (cache miss)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          set -eux
          # Clone repositories
          git -C depot_tools init
          git -C depot_tools fetch https://chromium.googlesource.com/chromium/tools/depot_tools
          git -C depot_tools checkout FETCH_HEAD
          
          git -C source/angle init
          git -C source/angle fetch https://chromium.googlesource.com/angle/angle
          git -C source/angle checkout FETCH_HEAD
          
          git -C source/libepoxy init
          git -C source/libepoxy fetch https://github.com/akihikodaki/libepoxy.git macos
          git -C source/libepoxy checkout FETCH_HEAD
          
          git -C source/virglrenderer init
          git -C source/virglrenderer fetch https://github.com/akihikodaki/virglrenderer.git macos
          git -C source/virglrenderer checkout FETCH_HEAD
          
          # Build ANGLE
          export DEPOT_TOOLS_UPDATE=0
          export PATH="$PWD/depot_tools:$PATH"
          cd source/angle
          scripts/bootstrap.py
          gclient sync -D
          gn gen --args=is_debug=false ../../build/angle
          cd ../..
          ninja -C build/angle
          
          # Build libepoxy
          [ -e build/libepoxy/meson-info ] || meson setup "-Dc_args=-I$PWD/source/angle/include" -Degl=yes -Dx11=false "--prefix=$PWD" build/libepoxy source/libepoxy
          meson install -C build/libepoxy
          
          # Build virglrenderer
          [ -e build/virglrenderer/meson-info ] || meson setup "-Dc_args=-I$PWD/source/angle/include" "--pkg-config-path=$PWD/lib/pkgconfig" "--prefix=$PWD" build/virglrenderer source/virglrenderer
          meson install -C build/virglrenderer

      - name: Verify cached dependencies
        if: steps.cache-deps.outputs.cache-hit == 'true'
        run: |
          # Verify angle build exists and is usable FIRST
          export DEPOT_TOOLS_UPDATE=0
          export PATH="$PWD/depot_tools:$PATH"
          if [ ! -d "build/angle" ] || [ ! -f "build/angle/libEGL.dylib" ]; then
            echo "Angle build from cache may be incomplete, rebuilding..."
            mkdir -p build/angle
            cd source/angle
            scripts/bootstrap.py
            gclient sync -D
            gn gen --args=is_debug=false ../../build/angle
            cd ../..
            ninja -C build/angle
          fi
          
          # Verify libepoxy installation
          if [ ! -f "lib/libepoxy.dylib" ]; then
            [ -e build/libepoxy/meson-info ] || meson setup "-Dc_args=-I$PWD/source/angle/include" -Degl=yes -Dx11=false "--prefix=$PWD" build/libepoxy source/libepoxy
            meson install -C build/libepoxy
          fi
          
          # Verify virglrenderer installation
          if [ ! -f "lib/libvirglrenderer.dylib" ] || [ ! -d "include/virgl" ]; then
            echo "Reinstalling virglrenderer from cached build..."
            # Clean existing installation if any
            rm -rf lib/libvirglrenderer* include/virgl
            # Reinstall
            meson install -C build/virglrenderer
          fi

      - name: Configure QEMU
        working-directory: ./build/qemu
        shell: bash
        run: |
          echo "Configuring build"                
          # Add epoxy include path to extra-cflags and limit targets
          PKG_CONFIG_PATH="$PWD/../../lib/pkgconfig" ../../source/qemu-${{ env.pkgver }}/configure \
            "--extra-cflags=-I$PWD/../../source/angle/include -march=native -mtune=native -flto=auto" \
            "--extra-ldflags=-L$PWD/../../lib" \
            "--prefix=$PWD/../../install_dir" \
            "--target-list=i386-softmmu,x86_64-softmmu,aarch64-softmmu"
         
      - name: Compile QEMU
        working-directory: ./build/qemu
        shell: bash
        run: |
          echo "Compiling Build"
          make -j$(sysctl -n hw.ncpu)

      - name: Install QEMU
        working-directory: ./build/qemu
        shell: bash
        run: |
          echo "Installing build to output"
          make install || true
          cat <<EOF > ../../install_dir/version.txt
          QEMU-3dfx-arch (macOS Build)
          =================================================
          Github Actions Artifact Build
          Version ${{ env.pkgver }}
          Built using macOS
          Built on $(date)
          EOF
          echo "Finished build at $(date)"

      - name: Compress QEMU binaries
        run: |
          mkdir -p Binaries
          tar -cJf Binaries/qemu-macos-3dfx-${{ env.pkgver }}.tar.xz -C install_dir .
          tar -cJf Binaries/lib-${{ env.pkgver }}.tar.xz -C lib .
          tar -cJf Binaries/include-${{ env.pkgver }}.tar.xz -C include .
          tar -cJf Binaries/build-angle-${{ env.pkgver }}.tar.xz -C build/angle .

      - name: Collect macOS Libraries
        working-directory: ./install_dir
        shell: bash
        run: |
          echo "Collecting required libraries for standalone use..."
          mkdir -p ../macos_libs/lib
          
          # Create a script to find and collect all dependencies
          cat > ../collect_libs.sh << 'EOF'
          #!/bin/bash
          
          # Function to recursively collect dependencies
          collect_deps() {
            local binary="$1"
            local target_dir="$2"
            local collected=()
            
            echo "Analyzing dependencies for: $binary"
            
            # Get library dependencies
            local deps=$(otool -L "$binary" | grep -v "$(basename $binary)" | grep -v "@executable_path" | grep -v "@rpath" | 
                        grep -v "/System/Library" | grep -v "/usr/lib" | awk '{print $1}')
            
            for lib in $deps; do
              # Skip if already collected or system library
              if [[ " ${collected[*]} " =~ " ${lib} " ]]; then
                continue
              fi
              
              if [ -f "$lib" ]; then
                lib_name=$(basename "$lib")
                echo "Copying $lib to $target_dir/$lib_name"
                # Use ditto instead of cp for more reliable copying on macOS
                ditto "$lib" "$target_dir/$lib_name" || echo "Warning: Could not copy $lib"
                if [ $? -eq 0 ]; then
                  collected+=("$lib")
                  
                  # Recursively collect this library's dependencies
                  collect_deps "$lib" "$target_dir"
                fi
              else
                echo "Warning: Could not find library $lib"
              fi
            done
          }
          
          # Main script
          if [ $# < 2 ]; then
            echo "Usage: $0 <binary_path> <target_dir>"
            exit 1
          fi
          
          collect_deps "$1" "$2"
          EOF
          
          chmod +x ../collect_libs.sh
          
          # Create directory with proper permissions
          mkdir -p ../macos_libs/lib
          chmod -R 755 ../macos_libs
          
          # Collect dependencies for each executable
          for exe in bin/qemu-system-*; do
            if [ -f "$exe" ]; then
              ../collect_libs.sh "$exe" "../macos_libs/lib"
            fi
          done
          
          # Create install script for the end user
          cat > ../macos_libs/install_libs.sh << 'EOF'
          #!/bin/bash
          
          # Create libs directory if it doesn't exist
          mkdir -p ~/lib
          
          # Copy all libraries
          cp -v lib/* ~/lib/ 2>/dev/null || true
          
          # Create a script to set environment variables
          cat > ~/set_qemu_env.sh << 'INNEREOF'
          #!/bin/bash
          export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:~/lib
          INNEREOF
          
          chmod +x ~/set_qemu_env.sh
          
          echo ""
          echo "Libraries installed to ~/lib"
          echo ""
          echo "To use QEMU, first run: source ~/set_qemu_env.sh"
          echo "Or add this line to your ~/.bash_profile or ~/.zshrc:"
          echo "export DYLD_LIBRARY_PATH=\$DYLD_LIBRARY_PATH:~/lib"
          EOF
          
          chmod +x ../macos_libs/install_libs.sh
          
          # Add readme
          cat > ../macos_libs/README.md << 'EOF'
          # QEMU macOS Libraries
          
          This package contains the libraries required to run QEMU without Homebrew installed.
          
          ## Installation
          
          1. Extract this archive
          2. Run `./install_libs.sh`
          3. Before running QEMU, execute: `source ~/set_qemu_env.sh`
          
          ## Library contents
          
          ```
          $(ls -la lib/ 2>/dev/null || echo "No libraries found")
          ```
          EOF
          
          # Collect ANGLE libraries too - check if directory exists first
          if [ -d "../../build/angle" ]; then
            # Check if any dylib files exist
            if ls ../../build/angle/*.dylib &>/dev/null; then
              ditto ../../build/angle/*.dylib ../macos_libs/lib/ || echo "Warning: Could not copy ANGLE libraries"
            else
              echo "No ANGLE libraries found in ../../build/angle/"
            fi
          else
            echo "ANGLE build directory not found"
          fi
          
          # Create tarball with proper permissions
          cd ..
          chmod -R 755 macos_libs
          tar -cJf qemu-macos-libs-${{ env.pkgver }}.tar.xz -C macos_libs .
          mkdir -p Binaries
          mv qemu-macos-libs-${{ env.pkgver }}.tar.xz Binaries/

      - name: Collect and package dependencies from Homebrew
        shell: bash
        run: |
          echo "Collecting Homebrew dependencies..."
          mkdir -p homebrew_deps
          chmod -R 755 homebrew_deps
          
          # List of common Homebrew dependencies for QEMU
          DEPS=(
            "glib"
            "pixman"
            "libusb"
            "libpng"
            "jpeg"
            "libssh"
            "snappy"
            "lzo"
            "nettle"
            "gnutls"
            "libslirp"
            "libssh2"
            "sdl2"
          )
          
          # Create directory structure
          mkdir -p homebrew_deps/lib homebrew_deps/include
          chmod 755 homebrew_deps/lib homebrew_deps/include
          
          # Copy library files
          for dep in "${DEPS[@]}"; do
            echo "Processing $dep..."
            # Find where Homebrew installed this package
            pkg_path=$(brew --prefix $dep 2>/dev/null || echo "")
            if [ -n "$pkg_path" ] && [ -d "$pkg_path" ]; then
              echo "Found $dep at $pkg_path"
              # Copy libraries
              if [ -d "$pkg_path/lib" ]; then
                find "$pkg_path/lib" -name "*.dylib" -exec ditto {} homebrew_deps/lib/ \; || echo "Warning: Could not copy libraries for $dep"
              fi
              # Copy headers
              if [ -d "$pkg_path/include" ]; then
                ditto "$pkg_path/include/" homebrew_deps/include/ || echo "Warning: Could not copy headers for $dep"
              fi
            else
              echo "Warning: Could not find Homebrew package $dep"
            fi
          done
          
          # Create installation script
          cat > homebrew_deps/install.sh << 'EOF'
          #!/bin/bash
          
          # Copy libraries to /usr/local
          sudo mkdir -p /usr/local/lib /usr/local/include
          sudo cp -v lib/* /usr/local/lib/ 2>/dev/null || true
          sudo cp -rv include/* /usr/local/include/ 2>/dev/null || true
          
          echo "Libraries installed to /usr/local/lib"
          echo "Headers installed to /usr/local/include"
          EOF
          
          chmod +x homebrew_deps/install.sh
          
          # Create package with proper permissions
          chmod -R 755 homebrew_deps
          mkdir -p Binaries
          tar -cJf Binaries/qemu-macos-homebrew-deps-${{ env.pkgver }}.tar.xz -C homebrew_deps .

      - name: Create Unified macOS Library Package
        shell: bash
        run: |
          echo "Creating unified macOS library package..."
          
          # Create directory structure
          mkdir -p unified_libs/lib unified_libs/include unified_libs/bin
          chmod -R 755 unified_libs
          
          # Copy QEMU libraries from collected dependencies
          if [ -d "macos_libs/lib" ]; then
            cp -v macos_libs/lib/* unified_libs/lib/ 2>/dev/null || true
          fi
          
          # Copy Homebrew libraries
          if [ -d "homebrew_deps/lib" ]; then
            cp -v homebrew_deps/lib/* unified_libs/lib/ 2>/dev/null || true
          fi
          
          # Copy Homebrew headers
          if [ -d "homebrew_deps/include" ]; then
            cp -rv homebrew_deps/include/* unified_libs/include/ 2>/dev/null || true
          fi
          
          # Copy ANGLE libraries - ensure this directory exists
          if [ -d "build/angle" ]; then
            # First check if any dylib files exist
            if ls build/angle/*.dylib &>/dev/null; then
              echo "Copying ANGLE libraries from build/angle/"
              cp -v build/angle/*.dylib unified_libs/lib/ || echo "Warning: Could not copy ANGLE libraries"
            else
              echo "No ANGLE libraries found in build/angle/"
            fi
          else
            echo "ANGLE build directory not found"
          fi
          
          # Copy virglrenderer and epoxy libraries from lib directory
          if [ -d "lib" ]; then
            cp -v lib/libvirglrenderer*.dylib unified_libs/lib/ 2>/dev/null || true
            cp -v lib/libepoxy*.dylib unified_libs/lib/ 2>/dev/null || true
          fi
          
          # Create a helper script to fix library paths
          cat > unified_libs/bin/fix-qemu-paths.sh << 'EOF'
          #!/bin/bash
          
          # Get the directory where this script is located
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          QEMU_BIN_DIR="$SCRIPT_DIR"
          LIB_DIR="$SCRIPT_DIR/../lib"
          
          # Function to fix paths in a binary
          fix_binary() {
            local binary="$1"
            echo "Fixing paths in $binary..."
            
            # Get all hardcoded library paths
            local hardcoded_paths=$(otool -L "$binary" | grep -v "@executable_path" | grep -v "@rpath" | 
                                    grep -v "/System/Library" | grep -v "/usr/lib" | awk '{print $1}')
            
            for path in $hardcoded_paths; do
              # Get base name of the library
              local lib_name=$(basename "$path")
              
              # Check if we have this library in our lib directory
              if [ -f "$LIB_DIR/$lib_name" ]; then
                echo "  Updating $path -> @executable_path/../lib/$lib_name"
                install_name_tool -change "$path" "@executable_path/../lib/$lib_name" "$binary"
              fi
            done
          }
          
          # Fix paths in all QEMU binaries
          echo "Scanning for QEMU binaries..."
          for bin in "$QEMU_BIN_DIR"/qemu-system-*; do
            if [ -f "$bin" ]; then
              fix_binary "$bin"
            fi
          done
          
          # Fix paths in libraries too
          echo "Fixing paths in libraries..."
          for lib in "$LIB_DIR"/*.dylib; do
            fix_binary "$lib"
          done
          
          echo "Library paths fixed. QEMU should now run correctly."
          EOF
          
          chmod +x unified_libs/bin/fix-qemu-paths.sh
          
          # Create a script to install the libraries
          cat > unified_libs/install.sh << 'EOF'
          #!/bin/bash
          
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          
          # Create user's lib directory
          mkdir -p ~/lib
          
          # Copy libraries 
          cp -v "$SCRIPT_DIR"/lib/* ~/lib/ 2>/dev/null || true
          
          # Create environment setup script
          cat > ~/set_qemu_env.sh << 'INNEREOF'
          #!/bin/bash
          export DYLD_LIBRARY_PATH=$HOME/lib:$DYLD_LIBRARY_PATH
          INNEREOF
          
          chmod +x ~/set_qemu_env.sh
          
          # Create a script to run QEMU with HVF acceleration
          cat > ~/run-qemu.sh << 'INNEREOF'
          #!/bin/bash
          
          # Source environment setup
          source ~/set_qemu_env.sh
          
          # Path to QEMU binary - adjust as needed
          QEMU_BIN="$1"
          shift
          
          # Run QEMU with HVF acceleration
          "$QEMU_BIN" \
            -machine virt,accel=hvf \
            -cpu cortex-a72 -smp 2 -m 1G \
            "$@"
          INNEREOF
          
          chmod +x ~/run-qemu.sh
          
          echo ""
          echo "Libraries installed to ~/lib"
          echo "Environment setup script created at ~/set_qemu_env.sh"
          echo "QEMU helper script created: ~/run-qemu.sh"
          echo ""
          echo "To use QEMU, first run: source ~/set_qemu_env.sh"
          echo "Or add this line to your ~/.bash_profile or ~/.zshrc:"
          echo "export DYLD_LIBRARY_PATH=\$HOME/lib:\$DYLD_LIBRARY_PATH"
          EOF
          
          chmod +x unified_libs/install.sh
          
          # Add README
          cat > unified_libs/README.md << 'EOF'
          # QEMU macOS Libraries
          
          This package contains all libraries required to run QEMU on macOS, including ANGLE, 
          VirGL, and all other dependencies.
          
          ## Installation
          
          1. Extract this archive
          2. Run `./install.sh`
          3. Before running QEMU, execute: `source ~/set_qemu_env.sh`
          
          ## Running QEMU
          
          After installation, you can use the helper script:
          
          ```
          ~/run-qemu.sh /path/to/qemu-system-aarch64 [other QEMU options]
          ```
          
          ## Troubleshooting
          
          If you have issues with library paths, run:
          
          ```
          bin/fix-qemu-paths.sh 
          ```
          
          This will fix the paths in your QEMU binaries to point to the correct libraries.
          
          ## Library Contents
          
          ```
          $(find lib -type f -name "*.dylib" | sort)
          ```
          EOF
          
          # Create tarball
          tar -cJf Binaries/qemu-macos-all-libs-${{ env.pkgver }}.tar.xz -C unified_libs .

      - name: Upload QEMU binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Qemu_macOS-3dfx-virgl_compressed
          path: |
            ./Binaries/qemu-macos-3dfx-${{ env.pkgver }}.tar.xz
            ./Binaries/qemu-macos-all-libs-${{ env.pkgver }}.tar.xz
            ./Binaries/build-angle-${{ env.pkgver }}.tar.xz
          if-no-files-found: warn
          compression-level: 6
          overwrite: true  

  Create_Release:
    needs:
      - MINGW64-Windows
      - UCRT64-Windows
      - Wrappers
      - build-macos
    runs-on: ubuntu-latest
    env:
      pkgver: "9.2.2"
    steps:
      - name: Download MINGW64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: bin-windows-mingw64-${{ env.pkgver }}-artifact
          path: ./mingw64_artifact

      - name: Download UCRT64 Artifact
        uses: actions/download-artifact@v4
        with:
          name: bin-windows-ucrt64-${{ env.pkgver }}-artifact
          path: ./ucrt64_artifact

      - name: Download Wrappers Artifact
        uses: actions/download-artifact@v4
        with:
          name: wrappers-artifact
          path: ./wrappers_artifact

      - name: Download macOS Compressed Binaries
        uses: actions/download-artifact@v4
        with:
          name: Qemu_macOS-3dfx-virgl_compressed
          path: ./Qemu_macOS-3dfx-virgl_compressed     

      - name: Compose QEMU Release Assets
        run: |
          mkdir -p QemuReleaseAssets
          cp -r mingw64_artifact QemuReleaseAssets/
          cp -r ucrt64_artifact QemuReleaseAssets/

      - name: Compress QEMU Release Assets
        run: |
          mkdir -p Qemu_Windows_compressed
          tar -cJf Qemu_Windows_compressed/qemu-${{ env.pkgver }}-Windows.tar.xz -C QemuReleaseAssets .

      - name: Compress Wrappers
        run: |
          mkdir -p Wrappers_compressed
          tar -cJf Wrappers_compressed/qemu-wrappers-${{ env.pkgver }}.tar.xz -C wrappers_artifact .

      - name: Set Release Tags
        id: set_release_tag
        shell: bash
        env:
          REPO: ${{ github.repository }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKGVER: ${{ env.pkgver }}
        run: |
          echo "Fetching existing releases for repo ${REPO}..."
          releases=$(curl -s -H "Authorization: token ${TOKEN}" "https://api.github.com/repos/${REPO}/releases")
          
          # Handle QEMU release tag
          base_exists=$(echo "$releases" | jq -r --arg t "$PKGVER" '.[].tag_name' | grep -Fx "$PKGVER" || true)
          if [ -z "$base_exists" ]; then
             echo "Base tag ${PKGVER} does not exist. Using it as the release tag."
             echo "QEMU_TAG_NAME=${PKGVER}" >> "$GITHUB_ENV"
          else
             echo "Base tag ${PKGVER} exists. Computing next incremental tag..."
             max=0
             for tag in $(echo "$releases" | jq -r --arg t "$PKGVER" '.[].tag_name' | grep "^${PKGVER}-" | grep -v "wrappers"); do
                 num=${tag#${PKGVER}-}
                 if [[ $num =~ ^[0-9]+$ ]]; then
                     if [ $num -gt $max ]; then
                        max=$num
                     fi
                 fi
             done
             next=$((max + 1))
             echo "QEMU_TAG_NAME=${PKGVER}-${next}" >> "$GITHUB_ENV"
          fi
          
          # Handle wrappers release tag
          wrapper_tag="wrappers-${PKGVER}"
          wrapper_exists=$(echo "$releases" | jq -r --arg t "$wrapper_tag" '.[].tag_name' | grep -Fx "$wrapper_tag" || true)
          if [ -z "$wrapper_exists" ]; then
             echo "Wrappers tag ${wrapper_tag} does not exist. Using it as the wrappers release tag."
             echo "WRAPPERS_TAG_NAME=${wrapper_tag}" >> "$GITHUB_ENV"
          else
             echo "Wrappers tag ${wrapper_tag} exists. Computing next incremental tag..."
             max=0
             for tag in $(echo "$releases" | jq -r '.[].tag_name' | grep "^wrappers-${PKGVER}-"); do
                 num=${tag#wrappers-${PKGVER}-}
                 if [[ $num =~ ^[0-9]+$ ]]; then
                     if [ $num -gt $max ]; then
                        max=$num
                     fi
                 fi
             done
             next=$((max + 1))
             echo "WRAPPERS_TAG_NAME=wrappers-${PKGVER}-${next}" >> "$GITHUB_ENV"
          fi
          
          echo "Final QEMU release tag: $(cat $GITHUB_ENV | grep QEMU_TAG_NAME | cut -d= -f2)"
          echo "Final Wrappers release tag: $(cat $GITHUB_ENV | grep WRAPPERS_TAG_NAME | cut -d= -f2)"

      - name: Upload QEMU Release Assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.QEMU_TAG_NAME }}
          release_name: "QEMU-3DFX-VIRGL ${{ env.pkgver }}"
          file: Qemu_Windows_compressed/*.tar.xz
          file_glob: true
          overwrite: true

      - name: Upload macOS Compressed Binaries to QEMU Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.QEMU_TAG_NAME }}
          file: Qemu_macOS-3dfx-virgl_compressed/*.tar.xz
          file_glob: true
          overwrite: true

      - name: Upload Wrappers to Separate Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.WRAPPERS_TAG_NAME }}
          release_name: "QEMU 3DFX Wrappers ${{ env.pkgver }}"
          body: "Windows wrappers (3DFX, Mesa, OpenGlide)"
          file: Wrappers_compressed/*.tar.xz
          file_glob: true
          overwrite: true
