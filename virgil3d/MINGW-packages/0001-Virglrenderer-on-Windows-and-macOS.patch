diff -Nru orig/virglrenderer-1.1.0/src/gallium/auxiliary/tgsi/tgsi_text.h src/virglrenderer-1.1.0/src/gallium/auxiliary/tgsi/tgsi_text.h
--- orig/virglrenderer-1.1.0/src/gallium/auxiliary/tgsi/tgsi_text.h
+++ src/virglrenderer-1.1.0/src/gallium/auxiliary/tgsi/tgsi_text.h
@@ -34,6 +34,9 @@
 
 #include "pipe/p_compiler.h"
 
+#ifdef __WIN32__
+#define uint unsigned
+#endif
 struct tgsi_token;
 
 bool
diff -Nru orig/virglrenderer-1.1.0/src/mesa/compat/c11/threads_win32.h src/virglrenderer-1.1.0/src/mesa/compat/c11/threads_win32.h
--- orig/virglrenderer-1.1.0/src/mesa/compat/c11/threads_win32.h
+++ src/virglrenderer-1.1.0/src/mesa/compat/c11/threads_win32.h
@@ -175,7 +175,7 @@
     return 0;
 }
 
-static void impl_tss_dtor_invoke()
+static void impl_tss_dtor_invoke(void)
 {
     int i;
     for (i = 0; i < EMULATED_THREADS_TSS_DTOR_SLOTNUM; i++) {
diff -Nru orig/virglrenderer-1.1.0/src/virgl_util.h src/virglrenderer-1.1.0/src/virgl_util.h
--- orig/virglrenderer-1.1.0/src/virgl_util.h
+++ src/virglrenderer-1.1.0/src/virgl_util.h
@@ -29,6 +29,9 @@
 #include <stdbool.h>
 #include <stdint.h>
 
+#ifdef WIN32
+#include <io.h>
+#endif
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
diff -Nru orig/virglrenderer-1.1.0/src/vrend_blitter.h src/virglrenderer-1.1.0/src/vrend_blitter.h
--- orig/virglrenderer-1.1.0/src/vrend_blitter.h
+++ src/virglrenderer-1.1.0/src/vrend_blitter.h
@@ -30,7 +30,7 @@
 /* shaders for blitting */
 
 #define FS_HEADER_GL                               \
-   "#version 130\n"                             \
+   "#version 140\n"                             \
    "// Blitter\n"                               \
    "%s"                                         \
 
@@ -48,7 +48,7 @@
    "precision mediump float;\n"                 \
 
 #define HEADER_GL                               \
-   "#version 130\n"                             \
+   "#version 140\n"                             \
    "// Blitter\n"                               \
 
 #define HEADER_GLES                             \
diff -Nru orig/virglrenderer-1.1.0/src/vrend_renderer.c src/virglrenderer-1.1.0/src/vrend_renderer.c
--- orig/virglrenderer-1.1.0/src/vrend_renderer.c
+++ src/virglrenderer-1.1.0/src/vrend_renderer.c
@@ -387,6 +387,7 @@
    uint64_t features[feat_last / 64 + 1];
 
    bool finishing : 1;
+   bool gl_apple : 1;
    bool use_gles : 1;
    bool use_core_profile : 1;
    bool use_external_blob : 1;
@@ -4915,6 +4916,7 @@
                             box->width, box->height, box->depth,
                             format, type, data);
    } else {
+       if (has_feature(feat_clear_texture))
       glClearTexSubImage(res->gl_id, level,
                          box->x, box->y, box->z,
                          box->width, box->height, box->depth,
@@ -7549,6 +7551,8 @@
    GLenum err;
 
    err = glGetError();
+   if (err == GL_INVALID_ENUM && vrend_state.gl_apple)
+       err = glGetError();
    if (err == GL_NO_ERROR)
       return true;
 
@@ -7660,6 +7664,7 @@
       virgl_info("gl_version %d - compat profile\n", gl_ver);
    }
 
+   vrend_state.gl_apple = (strcmp((const char *)glGetString(GL_VENDOR), "Apple") == 0);
    vrend_state.use_integer = use_integer();
 
    init_features(gles ? 0 : gl_ver,
@@ -8022,6 +8027,7 @@
    grctx->shader_cfg.has_gpu_shader5 = has_feature(feat_gpu_shader5);
    grctx->shader_cfg.has_es31_compat = has_feature(feat_gles31_compatibility);
    grctx->shader_cfg.has_conservative_depth = has_feature(feat_conservative_depth);
+   grctx->shader_cfg.gl_apple = vrend_state.gl_apple;
    grctx->shader_cfg.use_integer = vrend_state.use_integer;
    grctx->shader_cfg.has_dual_src_blend = has_feature(feat_dual_src_blend);
    grctx->shader_cfg.has_fbfetch_coherent = has_feature(feat_framebuffer_fetch);
@@ -8648,6 +8654,7 @@
 
    const bool format_can_texture_storage = has_feature(feat_texture_storage) &&
         (tex_conv_table[format].flags & VIRGL_TEXTURE_CAN_TEXTURE_STORAGE);
+   const bool format_has_storage_multisample = has_feature(feat_storage_multisample);
 
    if (format_can_texture_storage)
       gr->storage_bits |= VREND_STORAGE_GL_IMMUTABLE;
@@ -8721,7 +8728,7 @@
       }
 
       if (pr->nr_samples > 1) {
-         if (format_can_texture_storage) {
+         if (format_can_texture_storage && format_has_storage_multisample) {
             if (gr->target == GL_TEXTURE_2D_MULTISAMPLE) {
                glTexStorage2DMultisample(gr->target, pr->nr_samples,
                                          internalformat, pr->width0, pr->height0,
@@ -9705,7 +9712,7 @@
       glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
    else if (epoxy_gl_version() >= 45)
       glReadnPixels(x, y, width, height, format, type, bufSize, data);
-   else if (has_feature(feat_gles_khr_robustness))
+   else if (vrend_state.use_gles && has_feature(feat_gles_khr_robustness))
       glReadnPixelsKHR(x, y, width, height, format, type, bufSize, data);
    else
       glReadPixels(x, y, width, height, format, type, data);
@@ -10534,7 +10541,7 @@
    slice_offset = src_box->z * slice_size;
    cube_slice = (src_res->target == GL_TEXTURE_CUBE_MAP) ? src_box->z + src_box->depth : cube_slice;
    i = (src_res->target == GL_TEXTURE_CUBE_MAP) ? src_box->z : 0;
-   if (slice_offset + src_box->width * src_box->height + cube_slice * slice_size > total_size) {
+   if (src_box->z && (slice_offset + src_box->width * src_box->height + cube_slice * slice_size > total_size)) {
       virgl_error("Offset out of bound: %d\n", src_box->z);
       goto cleanup;
    }
diff -Nru orig/virglrenderer-1.1.0/src/vrend_shader.c src/virglrenderer-1.1.0/src/vrend_shader.c
--- orig/virglrenderer-1.1.0/src/vrend_shader.c
+++ src/virglrenderer-1.1.0/src/vrend_shader.c
@@ -3356,6 +3356,7 @@
    bool has_offset = strbuf_get_len (&offset_buf) != 0;
    // EXT_texture_shadow_lod defines a few more functions handling bias
    if (has_bias &&
+       ctx->cfg->has_texture_shadow_lod &&
        (inst->Texture.Texture == TGSI_TEXTURE_SHADOW2D_ARRAY ||
         inst->Texture.Texture == TGSI_TEXTURE_SHADOWCUBE ||
         inst->Texture.Texture == TGSI_TEXTURE_SHADOWCUBE_ARRAY))
@@ -3363,6 +3364,7 @@
 
    // EXT_texture_shadow_lod also adds the missing textureOffset for 2DArrayShadow in GLES
    if ((has_bias || has_offset) && ctx->cfg->use_gles &&
+       ctx->cfg->has_texture_shadow_lod &&
        (inst->Texture.Texture == TGSI_TEXTURE_SHADOW1D_ARRAY ||
         inst->Texture.Texture == TGSI_TEXTURE_SHADOW2D_ARRAY))
       ctx->shader_req_bits |= SHADER_REQ_TEXTURE_SHADOW_LOD;
@@ -6301,10 +6303,10 @@
 
       if (ctx->prog_type == TGSI_PROCESSOR_VERTEX && ctx->cfg->use_explicit_locations)
          emit_ext(glsl_strbufs, "ARB_explicit_attrib_location", "require");
-      if (ctx->prog_type == TGSI_PROCESSOR_FRAGMENT && fs_emit_layout(ctx))
+      if (ctx->prog_type == TGSI_PROCESSOR_FRAGMENT && fs_emit_layout(ctx) && !ctx->cfg->gl_apple)
          emit_ext(glsl_strbufs, "ARB_fragment_coord_conventions", "require");
 
-      if (ctx->ubo_used_mask)
+      if (ctx->ubo_used_mask && !ctx->cfg->gl_apple)
          emit_ext(glsl_strbufs, "ARB_uniform_buffer_object", "require");
 
       if (ctx->num_cull_dist_prop || ctx->key->num_in_cull || ctx->key->num_out_cull)
diff -Nru orig/virglrenderer-1.1.0/src/vrend_shader.h src/virglrenderer-1.1.0/src/vrend_shader.h
--- orig/virglrenderer-1.1.0/src/vrend_shader.h
+++ src/virglrenderer-1.1.0/src/vrend_shader.h
@@ -244,6 +244,7 @@
    uint32_t glsl_version : 12;
    uint32_t max_draw_buffers : 4;
    uint32_t max_shader_patch_varyings : 6;
+   uint32_t gl_apple : 1;
    uint32_t use_gles : 1;
    uint32_t use_core_profile : 1;
    uint32_t use_explicit_locations : 1;
